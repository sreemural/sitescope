AWSTemplateFormatVersion: '2010-09-09'
Description: Create an Application Load Balancer (ALB) and associate an existing EC2 instance running Tomcat
Resources:
  MyTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: MyTargetGroup
      Port: 8080  # Port where Tomcat is running
      Protocol: HTTP
      VpcId: vpc-0e091c9c4df566fde  # Your VPC ID
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 30
      HealthCheckPath: /  # Health check path for Tomcat
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 3
      UnhealthyThresholdCount: 3
      Targets:
        - Id: i-000a35d3a20aeea7e  # Your EC2 instance ID
          Port: 8080

  MyLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: MyALB2
      Subnets:
        - subnet-0c64c53078b7a48bd  # Subnet ID from one Availability Zone
        - subnet-05ecd7866a3222051  # Subnet ID from another Availability Zone
      SecurityGroups:
        - !GetAtt "MySecurityGroup.GroupId"
      Scheme: internet-facing
      Tags:
        - Key: Name
          Value: MyALB2

  MyListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref MyTargetGroup
      LoadBalancerArn: !Ref MyLoadBalancer
      Port: 80
      Protocol: HTTP

  MySecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP traffic to the Tomcat instance
      VpcId: vpc-0e091c9c4df566fde  # Your VPC ID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0  # Allow inbound traffic on Tomcat's port from anywhere

Outputs:
  LoadBalancerDNSName:
    Description: DNS name of the load balancer
    Value: !GetAtt MyLoadBalancer.DNSName
    Export:
      Name: LoadBalancerDNSName
